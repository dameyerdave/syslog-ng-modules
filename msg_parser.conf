######
# Block to reuse the parser
block parser msg-parser(regex('(?P<msg>.*)') prefix('.SDATA.meta.') field('MESSAGE')) {
    python(
        class('GeneralMessageParser')
        options('field', `field`)
        options('prefix', `prefix`)
        options('regex', `regex`)
    ); 
};

######
# General message parser
python {
import re
class GeneralMessageParser(object):
    def init(self, options):
        self.regex = re.compile(options['regex'])
        self.field = options['field']
        self.prefix = options['prefix']
        self.syslog_prefix = '.SDATA.syslog.'
        return True
    def deinit(self):
        return True
    def parse(self, msg):
        if msg[self.prefix + '_match'] != 'true':
            msg[self.syslog_prefix + 'RAWMSG'] = msg['RAWMSG']
            msg[self.syslog_prefix + 'ISODATE'] = msg['ISODATE']
            msg[self.syslog_prefix + 'DATE'] = msg['DATE']
            msg[self.syslog_prefix + 'S_ISODATE'] = msg['S_ISODATE']
            msg[self.syslog_prefix + 'S_DATE'] = msg['DATE']
            msg[self.syslog_prefix + 'PROGRAM'] = msg['PROGRAM']
            msg[self.syslog_prefix + 'LEGACY_MSGHDR'] = msg['LEGACY_MSGHDR']
            msg[self.syslog_prefix + 'HOST_FROM'] = msg['HOST_FROM']
            msg[self.syslog_prefix + 'HOST'] = msg['HOST']
            msg[self.syslog_prefix + 'FILE_NAME'] = msg['FILE_NAME']
            msg[self.syslog_prefix + 'SOURCE'] = msg['SOURCE']
            msg[self.syslog_prefix + 'MESSAGE'] = msg['MESSAGE']
            msg[self.prefix + '_msg'] = msg[self.field]
            match = self.regex.search(msg[self.field])
            if match:
                msg[self.prefix + '_match'] = 'true' 
                for key, value in match.groupdict().items():
                    msg[self.prefix + key] = value
            else:
                msg[self.prefix + '_match'] = 'false'
        return True
};

######
# Usage of the parser
#parser p_msg_parser_ex1 {
#    msg-parser(
#        regex('seq: (?P<seq>\d+), thread: (?P<thread>\d+), runid: (?P<runid>\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)')
#        prefix('.SDATA.meta.')
#        field('MESSAGE')
#    );
#};
#parse p_msg_parser_ex2 {
#    msg-parser(regex('seq: (?P<seq>\d+), thread: (?P<thread>\d+), runid: (?P<runid>\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)'));
#    msg-parser(regex('seq: (?P<seq>\d+), thread: (?P<thread>\d+), runid: (?P<runid>\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)'));
#};
