######
# Block to reuse the parser
# mode can be 
# 'minimal' to include the most important syslog macros, 
# 'debug' to include all syslog macros or 
# 'none' to not include syslog macros in SDATA
block parser msg-parser(regex('(?P<msg>.*)') prefix('.SDATA.meta.') field('MESSAGE') mode('minimal')) {
    python(
        class('GeneralMessageParser')
        options('field', `field`)
        options('prefix', `prefix`)
        options('regex', `regex`)
        options('mode', `mode`)
    ); 
};

######
# General message parser
python {
import re
class GeneralMessageParser(object):
    def init(self, options):
        self.regex = re.compile(options['regex'])
        self.field = options['field']
        self.prefix = options['prefix']
        self.mode = options['mode']
        self.syslog_prefix = '.SDATA.syslog.'
        return True
    def deinit(self):
        return True
    def parse(self, msg):
        if msg[self.prefix + '_match'] != 'true':
            if self.mode == 'minimal' or self.mode == 'debug':
                msg[self.syslog_prefix + 'FACILITY'] = msg['FACILITY']
                msg[self.syslog_prefix + 'PRIORITY'] = msg['PRIORITY']
                msg[self.syslog_prefix + 'RAWMSG'] = msg['RAWMSG']
                msg[self.syslog_prefix + 'ISODATE'] = msg['ISODATE']
                msg[self.syslog_prefix + 'DATE'] = msg['DATE']
                msg[self.syslog_prefix + 'PROGRAM'] = msg['PROGRAM']
                msg[self.syslog_prefix + 'LEGACY_MSGHDR'] = msg['LEGACY_MSGHDR']
                msg[self.syslog_prefix + 'HOST_FROM'] = msg['HOST_FROM']
                msg[self.syslog_prefix + 'HOST'] = msg['HOST']
                msg[self.syslog_prefix + 'FULLHOST_FROM'] = msg['FULLHOST_FROM']
                msg[self.syslog_prefix + 'FULLHOST'] = msg['FULLHOST']
                msg[self.syslog_prefix + 'FILE_NAME'] = msg['FILE_NAME']
                msg[self.syslog_prefix + 'SOURCE'] = msg['SOURCE']
                msg[self.syslog_prefix + 'SOURCEIP'] = msg['SOURCEIP']
                msg[self.syslog_prefix + 'MESSAGE'] = msg['MESSAGE']
            if self.mode == 'debug':
                msg[self.syslog_prefix + 'S_ISODATE'] = msg['S_ISODATE']
                msg[self.syslog_prefix + 'S_DATE'] = msg['DATE']
                msg[self.syslog_prefix + 'AMPM'] = msg['AMPM']
                msg[self.syslog_prefix + 'BSDTAG'] = msg['BSDTAG']
                msg[self.syslog_prefix + 'DATE'] = msg['DATE']
                msg[self.syslog_prefix + 'C_DATE'] = msg['C_DATE']
                msg[self.syslog_prefix + 'R_DATE'] = msg['R_DATE']
                msg[self.syslog_prefix + 'S_DATE'] = msg['S_DATE']
                msg[self.syslog_prefix + 'DAY'] = msg['DAY']
                msg[self.syslog_prefix + 'C_DAY'] = msg['C_DAY']
                msg[self.syslog_prefix + 'R_DAY'] = msg['R_DAY']
                msg[self.syslog_prefix + 'S_DAY'] = msg['S_DAY']
                msg[self.syslog_prefix + 'FACILITY_NUM'] = msg['FACILITY_NUM']
                msg[self.syslog_prefix + 'FULLDATE'] = msg['FULLDATE']
                msg[self.syslog_prefix + 'C_FULLDATE'] = msg['C_FULLDATE']
                msg[self.syslog_prefix + 'R_FULLDATE'] = msg['R_FULLDATE']
                msg[self.syslog_prefix + 'S_FULLDATE'] = msg['S_FULLDATE']
                msg[self.syslog_prefix + 'HOUR'] = msg['HOUR']
                msg[self.syslog_prefix + 'C_HOUR'] = msg['C_HOUR']
                msg[self.syslog_prefix + 'R_HOUR'] = msg['R_HOUR']
                msg[self.syslog_prefix + 'S_HOUR'] = msg['S_HOUR']
                msg[self.syslog_prefix + 'HOUR12'] = msg['HOUR12']
                msg[self.syslog_prefix + 'C_HOUR12'] = msg['C_HOUR12']
                msg[self.syslog_prefix + 'R_HOUR12'] = msg['R_HOUR12']
                msg[self.syslog_prefix + 'S_HOUR12'] = msg['S_HOUR12']
                msg[self.syslog_prefix + 'C_ISODATE'] = msg['C_ISODATE']
                msg[self.syslog_prefix + 'R_ISODATE'] = msg['R_ISODATE']
                msg[self.syslog_prefix + 'LEVEL_NUM'] = msg['LEVEL_NUM']
                msg[self.syslog_prefix + 'LOGHOST'] = msg['LOGHOST']
                msg[self.syslog_prefix + 'MIN'] = msg['MIN']
                msg[self.syslog_prefix + 'C_MIN'] = msg['C_MIN']
                msg[self.syslog_prefix + 'R_MIN'] = msg['R_MIN']
                msg[self.syslog_prefix + 'S_MIN'] = msg['S_MIN']
                msg[self.syslog_prefix + 'MONTH'] = msg['MONTH']
                msg[self.syslog_prefix + 'C_MONTH'] = msg['C_MONTH']
                msg[self.syslog_prefix + 'R_MONTH'] = msg['R_MONTH']
                msg[self.syslog_prefix + 'S_MONTH'] = msg['S_MONTH']
                msg[self.syslog_prefix + 'MONTH_ABBREV'] = msg['MONTH_ABBREV']
                msg[self.syslog_prefix + 'C_MONTH_ABBREV'] = msg['C_MONTH_ABBREV']
                msg[self.syslog_prefix + 'R_MONTH_ABBREV'] = msg['R_MONTH_ABBREV']
                msg[self.syslog_prefix + 'S_MONTH_ABBREV'] = msg['S_MONTH_ABBREV']
                msg[self.syslog_prefix + 'MONTH_NAME'] = msg['MONTH_NAME']
                msg[self.syslog_prefix + 'C_MONTH_NAME'] = msg['C_MONTH_NAME']
                msg[self.syslog_prefix + 'R_MONTH_NAME'] = msg['R_MONTH_NAME']
                msg[self.syslog_prefix + 'S_MONTH_NAME'] = msg['S_MONTH_NAME']
                msg[self.syslog_prefix + 'MONTH_WEEK'] = msg['MONTH_WEEK']
                msg[self.syslog_prefix + 'C_MONTH_WEEK'] = msg['C_MONTH_WEEK']
                msg[self.syslog_prefix + 'R_MONTH_WEEK'] = msg['R_MONTH_WEEK']
                msg[self.syslog_prefix + 'S_MONTH_WEEK'] = msg['S_MONTH_WEEK']
                msg[self.syslog_prefix + 'MSEC'] = msg['MSEC']
                msg[self.syslog_prefix + 'C_MSEC'] = msg['C_MSEC']
                msg[self.syslog_prefix + 'R_MSEC'] = msg['R_MSEC']
                msg[self.syslog_prefix + 'S_MSEC'] = msg['S_MSEC']
                msg[self.syslog_prefix + 'MSGHDR'] = msg['MSGHDR']
                msg[self.syslog_prefix + 'MSGID'] = msg['MSGID']
                msg[self.syslog_prefix + 'PID'] = msg['PID']
                msg[self.syslog_prefix + 'PRI'] = msg['PRI']
                msg[self.syslog_prefix + 'RCPTID'] = msg['RCPTID']
                msg[self.syslog_prefix + 'RUNID'] = msg['RUNID']
                msg[self.syslog_prefix + 'SEC'] = msg['SEC']
                msg[self.syslog_prefix + 'C_SEC'] = msg['C_SEC']
                msg[self.syslog_prefix + 'R_SEC'] = msg['R_SEC']
                msg[self.syslog_prefix + 'S_SEC'] = msg['S_SEC']
                msg[self.syslog_prefix + 'SEQNUM'] = msg['SEQNUM']
                #msg[self.syslog_prefix + 'STAMP'] = msg['STAMP']
                #msg[self.syslog_prefix + 'R_STAMP'] = msg['R_STAMP']
                #msg[self.syslog_prefix + 'S_STAMP'] = msg['S_STAMP']
                msg[self.syslog_prefix + 'SYSUPTIME'] = msg['SYSUPTIME']
                msg[self.syslog_prefix + 'TAG'] = msg['TAG']
                msg[self.syslog_prefix + 'TAGS'] = msg['TAGS']
                msg[self.syslog_prefix + 'TZ'] = msg['TZ']
                msg[self.syslog_prefix + 'C_TZ'] = msg['C_TZ']
                msg[self.syslog_prefix + 'R_TZ'] = msg['R_TZ']
                msg[self.syslog_prefix + 'S_TZ'] = msg['S_TZ']
                msg[self.syslog_prefix + 'UNIXTIME'] = msg['UNIXTIME']
                msg[self.syslog_prefix + 'C_UNIXTIME'] = msg['C_UNIXTIME']
                msg[self.syslog_prefix + 'R_UNIXTIME'] = msg['R_UNIXTIME']
                msg[self.syslog_prefix + 'S_UNIXTIME'] = msg['S_UNIXTIME']
                msg[self.syslog_prefix + 'UNIQID'] = msg['UNIQID']
                msg[self.syslog_prefix + 'USEC'] = msg['USEC']
                msg[self.syslog_prefix + 'C_USEC'] = msg['C_USEC']
                msg[self.syslog_prefix + 'R_USEC'] = msg['R_USEC']
                msg[self.syslog_prefix + 'S_USEC'] = msg['S_USEC']
                msg[self.syslog_prefix + 'YEAR'] = msg['YEAR']
                msg[self.syslog_prefix + 'C_YEAR'] = msg['C_YEAR']
                msg[self.syslog_prefix + 'R_YEAR'] = msg['R_YEAR']
                msg[self.syslog_prefix + 'S_YEAR'] = msg['S_YEAR']
                msg[self.syslog_prefix + 'WEEK'] = msg['WEEK']
                msg[self.syslog_prefix + 'C_WEEK'] = msg['C_WEEK']
                msg[self.syslog_prefix + 'R_WEEK'] = msg['R_WEEK']
                msg[self.syslog_prefix + 'S_WEEK'] = msg['S_WEEK']
                msg[self.syslog_prefix + 'WEEK_DAY_ABBREV'] = msg['WEEK_DAY_ABBREV']
                msg[self.syslog_prefix + 'C_WEEK_DAY_ABBREV'] = msg['C_WEEK_DAY_ABBREV']
                msg[self.syslog_prefix + 'R_WEEK_DAY_ABBREV'] = msg['R_WEEK_DAY_ABBREV']
                msg[self.syslog_prefix + 'S_WEEK_DAY_ABBREV'] = msg['S_WEEK_DAY_ABBREV']
                msg[self.syslog_prefix + 'WEEK_DAY'] = msg['WEEK_DAY']
                msg[self.syslog_prefix + 'C_WEEK_DAY'] = msg['C_WEEK_DAY']
                msg[self.syslog_prefix + 'R_WEEK_DAY'] = msg['R_WEEK_DAY']
                msg[self.syslog_prefix + 'S_WEEK_DAY'] = msg['S_WEEK_DAY']
                msg[self.syslog_prefix + 'WEEK_DAY_NAME'] = msg['WEEK_DAY_NAME']
                msg[self.syslog_prefix + 'C_WEEK_DAY_NAME'] = msg['C_WEEK_DAY_NAME']
                msg[self.syslog_prefix + 'R_WEEK_DAY_NAME'] = msg['R_WEEK_DAY_NAME']
                msg[self.syslog_prefix + 'S_WEEK_DAY_NAME'] = msg['S_WEEK_DAY_NAME']
            msg[self.prefix + '_msg'] = msg[self.field]
            match = self.regex.search(msg[self.field])
            if match:
                msg[self.prefix + '_match'] = 'true' 
                for key, value in match.groupdict().items():
                    msg[self.prefix + key] = value
            else:
                msg[self.prefix + '_match'] = 'false'
        return True
};

######
# Usage of the parser
#parser p_msg_parser_ex1 {
#    msg-parser(
#        regex('seq: (?P<seq>\d+), thread: (?P<thread>\d+), runid: (?P<runid>\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)')
#        prefix('.SDATA.meta.')
#        field('MESSAGE')
#    );
#};
#parse p_msg_parser_ex2 {
#    msg-parser(regex('seq: (?P<seq>\d+), thread: (?P<thread>\d+), runid: (?P<runid>\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)'));
#    msg-parser(regex('seq: (?P<seq>\d+), thread: (?P<thread>\d+), runid: (?P<runid>\d+), stamp: (?P<stamp>[^ ]+) (?P<padding>.*$)'));
#};
