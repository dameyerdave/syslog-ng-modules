######
# Block to reuse the parser
block parser win-msg-parser(prefix('.SDATA.winevent.') field('MESSAGE')) {
    python(
        class('WinMessageParser')
        options('field', `field`)
        options('prefix', `prefix`)
    ); 
};

######
# Windows message parser
python {
import re
class WinMessageParser(object):
    def init(self, options):
        self.cat = re.compile(r'^(?P<cat>[^:]+):\s*$')
        self.kvsplit = re.compile(r'^(?P<pad>\s*)(?P<key>[^:]+):\s+(?P<value>.*)$')
        self.space = re.compile(r'\s+')
        self.eventid = re.compile(r'\s*\(EventID \d+\)')
        self.descprefix = re.compile(r'[^\]]*\]\s')
        self.field = options['field']
        self.prefix = options['prefix']
        return True
    def deinit(self):
        return True
    def parse(self, msg):
        first = True
        cat = ''
        for line in msg[self.field].splitlines():
            if first:
                msg[self.prefix + 'EventDescription'] = self.eventid.sub('', self.descprefix.sub('', line)).strip()
                first = False
            else:
                match = self.cat.search(line)
                if match:
                    cat = self.space.sub('_', match.group('cat'))
                match = self.kvsplit.search(line)
                if match:
                    if len(match.group('pad')) == 0:
                        cat = ''
                    if len(cat) > 0:
                        msg[self.prefix + cat + '_' + self.space.sub('_', match.group('key'))] = self.eventid.sub('', match.group('value')).strip()
                    else:
                        msg[self.prefix + self.space.sub('_', match.group('key'))] = self.eventid.sub('', match.group('value')).strip()
        return True
};

######
# Usage of the parser
parser p_win_msg_parser {
    win-msg-parser(
        prefix('.SDATA.winevent.')
        field('MESSAGE')
    );
};
